<script is:inline>
	// Function to get user theme preference
	const getThemePreference = () => {
		if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
			return localStorage.getItem("theme");
		}
		return window.matchMedia("(prefers-color-scheme: dark)").matches
			? "dark"
			: "light";
	};

	// Function to apply theme
	const applyTheme = () => {
		const isDark = getThemePreference() === "dark";
		document.documentElement.classList[isDark ? "add" : "remove"]("dark");
	};

	// Apply theme immediately
	applyTheme();

	// Handle theme changes
	if (typeof localStorage !== "undefined") {
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains("dark");
			localStorage.setItem("theme", isDark ? "dark" : "light");
		});
		observer.observe(document.documentElement, {
			attributes: true,
			attributeFilter: ["class"],
		});
	}

	// Handle theme persistence during view transitions
	document.addEventListener("astro:after-swap", () => {
		applyTheme();
	});

	// Also ensure theme is applied after full page load
	document.addEventListener("astro:page-load", () => {
		applyTheme();
	});
</script>
